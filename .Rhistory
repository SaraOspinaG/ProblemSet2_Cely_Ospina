train_personas_f$Oc[is.na(train_personas_f$Oc)] <- 0 #aqui lo que hice fue cambiar los NA de Oc por valor de cero
head(train_personas_f$Oc)  #comprobar que quedo bien
#voy a crearle variable de mujer, toma valor de 1 si el individuo es mujer, 0 si no
train_personas_f <- train_personas_f %>%
mutate(mujer = if_else(train_personas_f$P6020==2, 1, 0))
#educacion es factor
sum(is.na(train_personas_f$P6210)) #no hay missing values en educ
train_personas_f$P6210 <- as.factor(train_personas_f$P6210)
class(train_personas_f$P6210)
#Ajustamos el comportamiento de afiliado para que no sabe, no responda sea igual a 0
summary(train_personas_f$P6090) #solo hay UN NA porque los que responden esta pregunta son jefes de hogar, asumimos que los NAs de la base original eran los hijos
#por lo tanto no hay problema en cambiar este unico NA por valor de 0
#veamos un histograma de como se comporta
hist(train_personas_f$P6090) #los valores distintos a 1 son muy pocos, en todo caso vamos a unificarlos para volverla dummy
#aqui vamos a cambiar el valor de 9 por el valor de 0
train_personas_f <- train_personas_f %>%
mutate(P6090 = if_else(train_personas_f$P6090==1, 1, 0))
#vemos como queda
summary(train_personas_f$P6090) #94% de los encuestados están ailiados al sistema de salud, es probable que personas pobres estén afiliadas
#por ultimo, cambiamos el NA por cero
train_personas_f$P6090[is.na(train_personas_f$P6090)] <- 0 #aqui lo que hice fue cambiar los NA por valor de cero
summary(train_personas_f$P6090) #ya no tiene NAs
#ahora veamos como queda
train_p4 <- select(filter(train_personas_f),c(P6040, Oc, P6210, mujer, P6090)) #quite Pet para centrarnos en Oc
tablep4 <- summary(train_p4)
tablep4
#P6040             Oc                                 P6210           mujer            P6090
#Min.   : 11.0   Min.   :0.0000   Ninguno                    : 8603   Min.   :0.0000   Min.   :0.0000
#1st Qu.: 37.0   1st Qu.:0.0000   Preescolar                 :   13   1st Qu.:0.0000   1st Qu.:1.0000
#Median : 49.0   Median :1.0000   Básica primaria (1o - 5o)  :46619   Median :0.0000   Median :1.0000
#Mean   : 49.6   Mean   :0.7107   Básica secundaria (6o - 9o):21616   Mean   :0.4164   Mean   :0.9402
#3rd Qu.: 61.0   3rd Qu.:1.0000   Media (10o - 13o)          :43028   3rd Qu.:1.0000   3rd Qu.:1.0000
#Max.   :108.0   Max.   :1.0000   Superior o universitaria   :45061   Max.   :1.0000   Max.   :1.0000
#                                 No sabe, no informa        :   20
#VEMOS= el promedio de edad de jefes de hogar es 49 a?os, 71% estan empleados, 41% son mujeres
#otra cosa= vemos que hay outliers en edad (P6040), aun mas teniendo en cuenta que en esta base tenemos solo jefe de hogar
#analisis de distribucion de la edad
boxplot(train_personas_f$P6040, #original
ylab = "edad"
)
#vamos a ponerle limites inferior y superior principalmente porque hay unos valores por encima de 100
lower_bound_ed<-0.002
upper_bound_ed<-0.998
lower_bound_etr <- quantile(train_personas_f$P6040, lower_bound_ed)
lower_bound_etr #18
upper_bound_etr <- quantile(train_personas_f$P6040, upper_bound_ed)
upper_bound_etr #93 #de esta manera sacamos esos valores locos de mas de 100 a?os
train_personas_f <- train_personas_f %>% subset(P6040 >= lower_bound_etr)
train_personas_f <- train_personas_f %>% subset(P6040 <= upper_bound_etr) #aqui modificamos la base para sacar a estas personas outliers de edad
#quedan 164512
boxplot(train_personas_f$P6040, #nueva version
ylab = "edad"
)
#SOLUCIONADOS LOS OUTLIERS DE EDAD
#Ahora voy a hacer exactamente lo mismo pero en test, de corrido
test_personas <- test_personas %>%
mutate(jefe_hogar = if_else(test_personas$P6050==1, 1, 0)) #crear jefe hogar
test_personas_f<- test_personas
test_personas_f <- test_personas_f %>% subset(jefe_hogar == 1) #aqui saque base con solo jefes de hogar #66168
test_personas_f <- test_personas_f %>%
mutate(P6090 = if_else(test_personas_f$P6090==1, 1, 0)) #salud
summary(test_personas_f$P6090) #continua habiendo 1 NA
test_personas_f$P6090[is.na(test_personas_f$P6090)] <- 0 #solucionado
test_personas_f$Oc[is.na(test_personas_f$Oc)] <- 0 #cambiar NA de Oc
test_personas_f <- test_personas_f %>%
mutate(mujer = if_else(test_personas_f$P6020==2, 1, 0)) #crear variable mujer
test_personas_f$P6210 <- as.factor(test_personas_f$P6210)        #educ as factor
lower_bound_ete <- quantile(test_personas_f$P6040, lower_bound_ed)
lower_bound_ete #18
upper_bound_ete <- quantile(test_personas_f$P6040, upper_bound_ed)
upper_bound_ete #93
test_personas_f <- test_personas_f %>% subset(P6040 >= lower_bound_ete)
test_personas_f <- test_personas_f %>% subset(P6040 <= upper_bound_ete) #quitar outliers de edad
#65981
#################################
#Unir Train
############
Personas <- select(filter(train_personas_f),c(id, mujer, Oc, P6210, P6040, P6090, P7510s3, P7510s5))
summary(Personas) #aqui vemos que los missing values que no hemos abordado son los de las variables de subsidios y de productos financieros
#mas adelante lo ajustamos
summary(train_hogares_f)
####Base de Hogares + Personas con todas las variables
train_hogares_personas <- left_join(train_hogares_f, Personas)
summary(train_hogares_personas)
train_final <- train_hogares_personas %>% drop_na(c("mujer", "Oc", "P6210")) #374 NAs que se generan realizando el cruce
summary(train_final)
#vemos en cuales variables de train_final hay NAs
is.na(train_final)
colSums(is.na(train_final))
colSums(is.na(train_final))>0
colnames(train_final)[colSums(is.na(train_final))>0] #"P5100"   "P5130"   "P5140"   "P7510s3" "P7510s5"
#no hay problema con esas variables de missings porque P5100, P5130 y P5140 estan conectadas entre si y juntas crean valor_arriendo, que no tiene NAs
#con respecto a "P7510s3" "P7510s5", vamos a ajustarlas=
#Ajustar si recibió subsidios en train
train_final <- train_final %>%
mutate(P7510s3 = if_else(train_final$P7510s3==1, 1, 0))
train_final$P7510s3[is.na(train_final$P7510s3)] <- 0
#Ajustar si tiene productos financieros en train
train_final <- train_final %>%
mutate(P7510s5 = if_else(train_final$P7510s5==1, 1, 0))
train_final$P7510s5[is.na(train_final$P7510s5)] <- 0
is.na(train_final)
colSums(is.na(train_final))
colSums(is.na(train_final))>0
colnames(train_final)[colSums(is.na(train_final))>0] #ahora si nos salen solo las de arriendo con missings, ya quedo bien
############################
#Unir Test
#######################
PersonasT <- select(filter(test_personas_f),c(id, mujer, Oc, P6210, P6040, P6090, P7510s3, P7510s5))
summary(PersonasT)
summary(test_personas_f)
####Base de Hogares + Personas con todas las variables
test_hogares_personas <- left_join(test_hogares_f, PersonasT)
summary(test_hogares_personas)
test_final <- test_hogares_personas %>% drop_na(c("mujer", "Oc", "P6210")) #se generan 156 missings en el cruce
#Ajustar si recibió subsidios en test
test_final <- test_final %>%
mutate(P7510s3 = if_else(test_final$P7510s3==1, 1, 0))
test_final$P7510s3[is.na(test_final$P7510s3)] <- 0
#Ajustar si tiene productos financieros en test
test_final <- test_final %>%
mutate(P7510s5 = if_else(test_final$P7510s5==1, 1, 0))
test_final$P7510s5[is.na(test_final$P7510s5)] <- 0
summary(test_final)
is.na(test_final)
colSums(is.na(test_final))
colSums(is.na(test_final))>0
colnames(test_final)[colSums(is.na(test_final))>0] #nuevamente solo nos quedan NAs en "P5100" "P5130" "P5140", ya quedo bien
############################# Ahora unos ultimos ajustes de variables de interes ###################################
#SOBRE VARIABLE P5090
#para poder sacar conclusiones sobre esta variable (tipo de posesion de la vivienda) hay que volverla dummys
#recordar esto:
#val_lab(train_hogares$P5090) = num_lab("
#             1 Propia
#             2 Propia pagando
#             3 Arriendo
#             4 Usufructo
#             5 Posesion sin titulo
#             6 Otra_posesion
#")
#en train
train_final <- train_final %>%
mutate(viv_propia = if_else(train_final$P5090==1, 1, 0))
train_final <- train_final %>%
mutate(viv_propiapagando = if_else(train_final$P5090==2, 1, 0))
train_final <- train_final %>%
mutate(viv_arrendada = if_else(train_final$P5090==3, 1, 0))
train_final <- train_final %>%
mutate(viv_usufr = if_else(train_final$P5090==4, 1, 0))
train_final <- train_final %>%
mutate(viv_sintitulo = if_else(train_final$P5090==5, 1, 0))
train_final <- train_final %>%
mutate(viv_otra = if_else(train_final$P5090==6, 1, 0))
#en test
test_final <- test_final %>%
mutate(viv_propia = if_else(test_final$P5090==1, 1, 0))
test_final <- test_final %>%
mutate(viv_propiapagando = if_else(test_final$P5090==2, 1, 0))
test_final <- test_final %>%
mutate(viv_arrendada = if_else(test_final$P5090==3, 1, 0))
test_final <- test_final %>%
mutate(viv_usufr = if_else(test_final$P5090==4, 1, 0))
test_final <- test_final %>%
mutate(viv_sintitulo = if_else(test_final$P5090==5, 1, 0))
test_final <- test_final %>%
mutate(viv_otra = if_else(test_final$P5090==6, 1, 0))
#lo mismo lo voy a hacer con la de educacion #P6210
#la cosa es que educacion trae nombres rarisimos entonces creo que la voy a hacer a mano
#en train
colnames(train_final)
#              "Ninguno"                     "Preescolar"
#[40] "Básica primaria (1o - 5o)"   "Básica secundaria (6o - 9o)" "Media (10o - 13o)"
#[43] "Superior o universitaria"    "No sabe, no informa"
train_final <- train_final %>%
mutate(sin_educ = if_else(train_final$P6210=="Ninguno", 1, 0))
train_final <- train_final %>%
mutate(preescolar = if_else(train_final$P6210=="Preescolar", 1, 0))
train_final <- train_final %>%
mutate(primaria = if_else(train_final$P6210=="Básica primaria (1o - 5o)", 1, 0))
train_final <- train_final %>%
mutate(secundaria = if_else(train_final$P6210=="Básica secundaria (6o - 9o)", 1, 0))
train_final <- train_final %>%
mutate(bachillerato_completo = if_else(train_final$P6210=="Media (10o - 13o)", 1, 0))
train_final <- train_final %>%
mutate(superior = if_else(train_final$P6210=="Superior o universitaria", 1, 0))
train_final <- train_final %>%
mutate(educ_ns_nr = if_else(train_final$P6210=="No sabe, no informa", 1, 0))
#en test
test_final <- test_final %>%
mutate(sin_educ = if_else(test_final$P6210=="Ninguno", 1, 0))
test_final <- test_final %>%
mutate(preescolar = if_else(test_final$P6210=="Preescolar", 1, 0))
test_final <- test_final %>%
mutate(primaria = if_else(test_final$P6210=="Básica primaria (1o - 5o)", 1, 0))
test_final <- test_final %>%
mutate(secundaria = if_else(test_final$P6210=="Básica secundaria (6o - 9o)", 1, 0))
test_final <- test_final %>%
mutate(bachillerato_completo = if_else(test_final$P6210=="Media (10o - 13o)", 1, 0))
test_final <- test_final %>%
mutate(superior = if_else(test_final$P6210=="Superior o universitaria", 1, 0))
test_final <- test_final %>%
mutate(educ_ns_nr = if_else(test_final$P6210=="No sabe, no informa", 1, 0))
#############################
#2. Estadistica descriptiva general
###############################
############################consideraciones variables explicativas ##########
#querremos mostrar las variables que nos interesan en TRAIN
#como ya no tenemos hogares y personas por separado, sacamos este analisis en las bases final
colnames(train_final)
#[1] "id"                    "Clase"                 "Dominio"               "P5000"                 "P5010"                 "P5090"                 "P5100"                 "P5130"
#[9] "P5140"                 "Nper"                  "Npersug"               "Ingtotug"              "Ingtotugarr"           "Ingpcug"               "Li"                    "Lp"
#[17] "Pobre"                 "Indigente"             "Npobres"               "Nindigentes"           "Fex_c"                 "Depto"                 "Fex_dpto"              "valor_arriendo"
#[25] "mujer"                 "Oc"                    "P6210"                 "P6040"                 "P6090"                 "P7510s3"               "P7510s5"               "Propia"
#[33] "Propia_pagando"        "Arriendo"              "Usufructo"             "Posesion_sin_titulo"   "Otra_posesion"         "sin_educ"              "preescolar"            "primaria"
#[41] "secundaria"            "bachillerato_completo" "superior"              "educ_ns_nr"
var_lab(train_final$P5000) = "Num total de cuartos"
var_lab(train_final$P5010) = "Num total de cuartos donde se duerme"
var_lab(train_final$Npersug) = "Num personas por unidad de gasto"
var_lab(train_final$Ingtotug) = "Ingreso total unidad de gasto"
var_lab(train_final$Ingtotugarr) = "Ingreso total unidad de gasto con imputacion de arriendo"
var_lab(train_final$Ingtpcug) = "Ingreso per capita unidad de gasto con imputacion de arriendo"
var_lab(train_final$Li) = "Linea indigencia"
var_lab(train_final$Li) = "Linea pobreza"
var_lab(train_final$Pobre) = "Hogar clasificado como pobre (1)"
var_lab(train_final$Npobres) = "Total pobres en el hogar"
var_lab(train_final$Nindigentes) = "Total indigentes en el hogar"
var_lab(train_final$Fex_c) = "Factor de expansion anualizado"
var_lab(train_final$Fex_dpto) = "Factor de expansion departamental"
var_lab(train_final$mujer) = "Jefe de hogar mujer (1)"
var_lab(train_final$P6210) = "Nivel educativo max jefe de hogar"
var_lab(train_final$P6040) = "Edad jefe de hogar"
var_lab(train_final$P6090) = "Entidad salud jefe de hogar (1=si)"
var_lab(train_final$P7510s3) = "Jefe de hogar recibe ayudas institucionales"
var_lab(train_final$P7510s5) = "Jefe de hogar recibe dinero de productos financieros"
dim(train_final) #151982     44
#paquete gtsummary
#The default output from tbl_summary() is meant to be publication ready.
summary(train_final$Pobre) #mean= 0.1923
class(train_final$Pobre) #19% de las observaciones de hogares denotan que son pobres, pero R no lo lee porque es labelled numeric y no le he podido cambiar la clase
#voy a intentar crear una nueva variable con los mismos valores
train_final <- train_final %>%
mutate(hogarpobre = if_else(train_final$Pobre==1, 1, 0))
class(train_final$hogarpobre) #esta ya queda solo como numeric
var_lab(train_final$hogarpobre) = "Hogar clasificado como pobre (1)" #ahora si se pudo
#tabla general
train_final %>%
select(hogarpobre, mujer, P6210, P6040, valor_arriendo, Ingtotugarr) %>%
tbl_summary()
#tabla discriminando si el jefe de hogar es hombre o mujer
train_final %>%
select(hogarpobre, mujer, P6210, P6040, valor_arriendo, Ingtotugarr) %>%
tbl_summary(by=mujer)
summary(train_final$valor_arriendo)
hist(train_final$valor_arriendo)
#aqui se le pueden añadir mas tablas si quisieramos pero creo que debido a que el documento es tan acotado, podemos por ahora dejar con estas basicas
##
#Prueba de como se mide la pobreza
#aqui vamos a ver si midiendo si un hogar es pobre "a mano" podemos llegar a los mismos resultados que el dane
train_final <- train_final %>%
mutate(hogar_pobre_pr = if_else(train_final$Ingtotugarr<=(train_final$Lp * train_final$Nper), 1, 0))
#notar que tocaba multiplicar linea de pobreza por numero de personas
summary(train_final$hogarpobre)
compare<- select(filter(train_final),c(hogarpobre, hogar_pobre_pr))
table_compare <- summary(compare)
table_compare
#hogarpobre     hogar_pobre_pr
#Min.   :0.0000   Min.   :0.0000
#1st Qu.:0.0000   1st Qu.:0.0000
#Median :0.0000   Median :0.0000
#Mean   :0.1923   Mean   :0.1928 #ahora sí nos da
#3rd Qu.:0.0000   3rd Qu.:0.0000
#Max.   :1.0000   Max.   :1.0000
### ####### ####### #######
#por ultimo voy a hacer exactamente lo mismo pero en test_final
###### ######## ####### ######
colnames(test_final)
#[1] "id"                             "Clase"                          "Dominio"                        "P5000"                          "P5010"
#[6] "P5090"                          "P5100"                          "P5130"                          "P5140"                          "Nper"
#[11] "Npersug"                        "Li"                             "Lp"                             "Fex_c"                          "Depto"
#[16] "Fex_dpto"                       "valor_arriendo"                 "mujer"                          "Oc"                             "P6210"
#[21] "P6040"                          "P6090"                          "P7510s3"                        "P7510s5"                        "Propia, totalmente pagada"
#[26] "Propia, la están pagando"       "En arriendo o subarriendo"      "En usufructo"                   "Posesión sin titulo (ocupante)" "Otra"
#[31] "sin_educ"                       "preescolar"                     "primaria"                       "secundaria"                     "bachillerato_completo"
#[36] "superior"                       "educ_ns_nr"
##NOTAR que en test no esta la variable de Ingtotugarr, entonces hay que aprender a predecirla con lo que tenemos
var_lab(test_final$P5000) = "Num total de cuartos"
var_lab(test_final$P5010) = "Num total de cuartos donde se duerme"
var_lab(test_final$Npersug) = "Num personas por unidad de gasto"
#var_lab(train_final$Ingtotug) = "Ingreso total unidad de gasto" #NO EXISTE
#(train_final$Ingtotugarr) = "Ingreso total unidad de gasto con imputacion de arriendo" #NO EXISTE
#var_lab(train_final$Ingtpcug) = "Ingreso per capita unidad de gasto con imputacion de arriendo" #NO EXISTE
var_lab(test_final$Li) = "Linea indigencia"
var_lab(test_final$Li) = "Linea pobreza"
#var_lab(train_final$Pobre) = "Hogar clasificado como pobre (1)" #NO EXISTE
#var_lab(train_final$Npobres) = "Total pobres en el hogar" #NO EXISTE
#var_lab(train_final$Nindigentes) = "Total indigentes en el hogar"#NO EXISTE
var_lab(test_final$Fex_c) = "Factor de expansion anualizado"
var_lab(test_final$Fex_dpto) = "Factor de expansion departamental"
var_lab(test_final$mujer) = "Jefe de hogar mujer (1)"
var_lab(test_final$P6210) = "Nivel educativo max jefe de hogar"
var_lab(test_final$P6040) = "Edad jefe de hogar"
var_lab(test_final$P6090) = "Entidad salud jefe de hogar (1=si)"
var_lab(test_final$P7510s3) = "Jefe de hogar recibe ayudas institucionales"
var_lab(test_final$P7510s5) = "Jefe de hogar recibe dinero de productos financieros"
dim(test_final) #60845    37
#no hago el analisis de hogares pobres precisamente porque en esta base no los tenemos
#tabla general
test_final %>%
select(mujer, P6210, P6040, valor_arriendo) %>%
tbl_summary()
#tabla discriminando si el jefe de hogar es hombre o mujer
test_final %>%
select(mujer, P6210, P6040, valor_arriendo) %>%
tbl_summary(by=mujer) #las proporciones de todo estan dando parecidas, excepto valor arriendo, que en esta muestra mas pequeña esta dando mas caro para las mujeres (40.000 pesos mas caro en promedio, alrededor de 11% mas caro)
summary(test_final$valor_arriendo)
hist(test_final$valor_arriendo) #dan parecidos
#####Tener Pobre como factor para que los modelos que corra con caret funcionen
train_final <- train_final %>% mutate(hogar_es_pobre= train_final$hogarpobre)
train_final <- train_final %>% mutate(hogar_es_pobre=factor(hogar_es_pobre, levels=c(1,0), labels=c("Si", "No")))
#3. Dividir
##Primero partimos la base de entrenamiento, se parte en 80% - 20% por ser la forma en la que se comporta la variable de pobreza
set.seed(123)
split1<-createDataPartition(train_final$hogarpobre, p = .8)[[1]]
length(split1)
other<-train_final[-split1,]
training <-train_final[split1,]
##Ahora partimos para obtener las bases de evaluacion y prueba
split2<- createDataPartition(other$hogarpobre, p= 1/3) [[1]]
evaluation<-other[split2,]
testing<-other[-split2,]
####NOTAR ENTONCES QUE AQUI TENEMOS LO SIGUIENTE:
#TRAINING:    121586 obs
#EVALUATION:   10132 obs
#TESTING:      20264 obs  #recordar que en este testing SI HAY la variable de pobres
#Por otro lado
#TEST_FINAL:   60845 obs  #en esta es donde haremos la prueba final final no va mas
################################################################################################
##4. Modelos de Clasificación
#Pobre
###################
##Predecir pobreza
##Classification Models: (este es si pobre 1 o 0)#######################################
intersect(names(training), names(test_final))
set.seed(123)
adaboost <- train(
hogarpobre ~ P5000 + P5010 + valor_arriendo + mujer + Oc + P6040 + P6090 + P7510s3 + P7510s5 + sin_educ + preescolar + primaria + secundaria + bachillerato_completo + superior + educ_ns_nr + viv_propia + viv_propiapagando + viv_arrendada + viv_usufr + viv_sintitulo + viv_otra
data = training,
method = "adaboost",
trControl = ctrl,
family = "binomial",
metric = "Sens",
#preProcess = c("center", "scale")
)
set.seed(123)
adaboost <- train(
hogarpobre ~ P5000 + P5010 + valor_arriendo + mujer + Oc + P6040 + P6090 + P7510s3 + P7510s5 + sin_educ + preescolar + primaria + secundaria + bachillerato_completo + superior + educ_ns_nr + viv_propia + viv_propiapagando + viv_arrendada + viv_usufr + viv_sintitulo + viv_otra ,
data = training,
method = "adaboost",
trControl = ctrl,
family = "binomial",
metric = "Sens",
#preProcess = c("center", "scale")
)
fiveStats <- function(...) c(twoClassSummary(...), defaultSummary(...))
ctrl<- trainControl(method = "cv",
number = 5,
summaryFunction = fiveStats,
classProbs = TRUE,
verbose = FALSE,
savePredictions = T)
adaboost <- train_final(
hogarpobre ~amount+installment+age+ historygood + historypoor + purposeusedcar+ purposegoods.repair + purposeedu + foreigngerman + rentTR
data = train_hogares_total, #aqui poner la base final
method = "adaboost",
trControl = ctrl,
family = "binomial",
metric = "Sens",
#preProcess = c("center", "scale")
)
summary(training$hogarpobre)
fiveStats <- function(...) c(twoClassSummary(...), defaultSummary(...))
ctrl<- trainControl(method = "cv",
number = 5,
summaryFunction = fiveStats,
classProbs = TRUE,
verbose = FALSE,
savePredictions = T)
set.seed(123)
adaboost <- train(
hogarpobre ~ P5000 + P5010 + valor_arriendo + mujer + Oc + P6040 + P6090 + P7510s3 + P7510s5 + sin_educ + preescolar + primaria + secundaria + bachillerato_completo + superior + educ_ns_nr + viv_propia + viv_propiapagando + viv_arrendada + viv_usufr + viv_sintitulo + viv_otra ,
data = training,
method = "adaboost",
trControl = ctrl,
family = "binomial",
metric = "Sens",
#preProcess = c("center", "scale")
)
set.seed(123)
adaboost <- train(
hogarpobre ~ P5000 + P5010 + valor_arriendo + mujer + Oc + P6040 + P6090 + P7510s3 + P7510s5 + sin_educ + preescolar + primaria + secundaria + bachillerato_completo + superior + educ_ns_nr + viv_propia + viv_propiapagando + viv_arrendada + viv_usufr + viv_sintitulo + viv_otra ,
data = training,
method = "adaboost",
trControl = ctrl,
family = "binomial",
metric = "Sens",
preProcess = c("center", "scale")
)
install.packages("randomForest")
set.seed(123)
forest <- train(
hogarpobre ~ P5000 + P5010 + valor_arriendo + mujer + Oc + P6040 + P6090 + P7510s3 + P7510s5 + sin_educ + preescolar + primaria + secundaria + bachillerato_completo + superior + educ_ns_nr + viv_propia + viv_propiapagando + viv_arrendada + viv_usufr + viv_sintitulo + viv_otra ,
method = "rf",
trControl = ctrl,
family = "binomial",
metric="Sens",
#preProcess = c("center", "scale")
)
forest <- train(
hogarpobre ~ P5000 + P5010 + valor_arriendo + mujer + Oc + P6040 + P6090 + P7510s3 + P7510s5 + sin_educ + preescolar + primaria + secundaria + bachillerato_completo + superior + educ_ns_nr + viv_propia + viv_propiapagando + viv_arrendada + viv_usufr + viv_sintitulo + viv_otra ,
data = training,
method = "rf",
trControl = ctrl,
family = "binomial",
metric="Sens",
#preProcess = c("center", "scale")
)
View(training)
View(training)
forest <- train(
Ingtotugarr ~ P5000 + P5010 + valor_arriendo + mujer + Oc + P6040 + P6090 + P7510s3 + P7510s5 + sin_educ + preescolar + primaria + secundaria + bachillerato_completo + superior + educ_ns_nr + viv_propia + viv_propiapagando + viv_arrendada + viv_usufr + viv_sintitulo + viv_otra ,
data = training,
method = "rf",
trControl = ctrl,
family = "binomial",
metric="Sens",
#preProcess = c("center", "scale")
)
forest <- train(
Ingtotugarr ~ P5000 + P5010 + valor_arriendo + mujer + Oc + P6040 + P6090 + P7510s3 + P7510s5 + preescolar + primaria + secundaria + bachillerato_completo + superior + educ_ns_nr + viv_propia + viv_propiapagando + viv_arrendada + viv_usufr + viv_sintitulo ,
data = training,
method = "rf",
trControl = ctrl,
family = "binomial",
metric="Sens",
#preProcess = c("center", "scale")
)
summary(training$hogarpobre)
summary(evaluation$hogarpobre)
summary(testing$hogarpobre)
forest <- train(
hogar_es_pobre ~ P5000 + P5010 + valor_arriendo + mujer + Oc + P6040 + P6090 + P7510s3 + P7510s5 + preescolar + primaria + secundaria + bachillerato_completo + superior + educ_ns_nr + viv_propia + viv_propiapagando + viv_arrendada + viv_usufr + viv_sintitulo ,
data = training,
method = "rf",
trControl = ctrl,
family = "binomial",
metric="Sens",
#preProcess = c("center", "scale")
)
ctrl<- trainControl(method = "cv",
number = 5,
summaryFunction = fiveStats,
classProbs = TRUE,
verbose = FALSE,
savePredictions = T)
set.seed(123)
adaboost <- train(
hogarpobre ~ P5000 + P5010 + valor_arriendo + mujer + Oc + P6040 + P6090 + P7510s3 + P7510s5 + sin_educ + preescolar + primaria + secundaria + bachillerato_completo + superior + educ_ns_nr + viv_propia + viv_propiapagando + viv_arrendada + viv_usufr + viv_sintitulo + viv_otra ,
data = training,
method = "adaboost",
trControl = ctrl,
family = "binomial",
metric = "Sens",
#preProcess = c("center", "scale")
)
summary(training$hogarpobre)
summary(training$hogar_es_pobre)
adaboost <- train(
hogar_es_pobre ~ P5000 + P5010 + valor_arriendo + mujer + Oc + P6040 + P6090 + P7510s3 + P7510s5 + sin_educ + preescolar + primaria + secundaria + bachillerato_completo + superior + educ_ns_nr + viv_propia + viv_propiapagando + viv_arrendada + viv_usufr + viv_sintitulo + viv_otra ,
data = training,
method = "adaboost",
trControl = ctrl,
family = "binomial",
metric = "Sens",
#preProcess = c("center", "scale")
)
#prueba con pocas explicativas para ver si corre bien el codigo
adaboost <- train(
hogar_es_pobre ~ valor_arriendo + mujer + Oc + P6040 + superior + viv_propia ,
data = training,
method = "adaboost",
trControl = ctrl,
family = "binomial",
metric = "Sens",
#preProcess = c("center", "scale")
)
#prueba con pocas explicativas para ver si corre bien el codigo
adaboost <- train(
hogar_es_pobre ~ mujer + viv_propia ,
data = training,
method = "adaboost",
trControl = ctrl,
family = "binomial",
metric = "Sens",
#preProcess = c("center", "scale")
)
pred_ada<-predict(adaboost,testing)
confusionMatrix(testing$hogarpobre,pred_ada)
confusionMatrix(testing$hogar_es_pobre,pred_ada)
varImp(adaboost,scale=TRUE)
summary(test_final$hogarpobre)
summary(testing$viv_propia)
View(training)
