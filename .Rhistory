train_hogares_f<- train_hogares %>% subset(valor_arriendo >= 1*iqr) #corre bien
ggplot () + geom_boxplot(data=train_hogares_f, aes(x=valor_arriendo), fill ="tomato", alpha=0.5)
train_h4 <- select(filter(train_hogares_f),c(Dominio, P5090, valor_arriendo, Nper))
table3 <- summary(train_h4)
table3
hist(train_hogares$valor_arriendo)
prueba <- train_hogares$valor_arriendo
hist(prueba)
head(train_hogares$valor_arriendo)
boxplot(train_hogares$valor_arriendo,
ylab = "valor arriendo"
)
boxplot(train_hogares_f$valor_arriendo,
ylab = "valor arriendo"
)
boxplot.stats(train_hogares_f$valor_arriendo)$out
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.025)
lower_bound
upper_bound <- quantile(train_hogares_f$valor_arriendo, 0.975)
upper_bound
outlier_ind <- which(train_hogares_f$valor_arriendo < lower_bound | train_hogares_f$valor_arriendo > upper_bound)
outlier_ind
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.01)
lower_bound
upper_bound <- quantile(train_hogares_f$valor_arriendo, 0.99)
upper_bound
outlier_ind <- which(train_hogares_f$valor_arriendo < lower_bound | train_hogares_f$valor_arriendo > upper_bound)
outlier_ind
dat[outlier_ind, "valor_arriendo"]
train_hogares[outlier_ind, "valor_arriendo"]
train_hogares_f<- train_hogares %>% subset(valor_arriendo >= lower_bound | valor_arriendo <= upper_bound)
train_hogares_f<- train_hogares
cbind(train_hogares[1], sapply(train_hogares[-1], function(i)
replace(i, i < quantile(i, 0.01) | i > quantile(i, 0.99), NA)))
train_hogares_f %>%
mutate_at(vars(valor_arriendo), function(x) if_else(between(percent_rank(x), .01, .99), x, NA_real_))
train_hogares_f %>%
mutate_at(vars(train_hogares_f$valor_arriendo), function(x) if_else(between(percent_rank(x), .01, .99), x, NA_real_))
quantiles <- quantile(train_hogares_f$valor_arriendo, c(.01, .99), na.rm = TRUE)
quantiles
train_hogares_f<- train_hogares
quantiles <- quantile(train_hogares_f$valor_arriendo, c(.01, .99), na.rm = TRUE)
quantiles
train_hogares_f<- train_hogares_f %>% subset(valor_arriendo >= 1*quantiles)
train_hogares_f<- train_hogares_f %>% subset(valor_arriendo = 1*quantiles)
train_hogares_f<- train_hogares
train_hogares_f<- train_hogares_f %>% subset(valor_arriendo>= 300000 | valor_arriendo <= 2400000)
train_hogares_f<- train_hogares
train_hogares_f <- subset(train_hogares_f, valor_arriendo>= 300000 | valor_arriendo <= 2400000)
View(train_hogares_f)
train_hogares_f<- train_hogares
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.01)
lower_bound
lower_bound
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.025)
lower_bound
train_hogares_f<- train_hogares
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.025)
lower_bound
upper_bound <- quantile(train_hogares_f$valor_arriendo, 0.99)
upper_bound
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.025)
lower_bound
rm(list=ls())
setwd("C:/Users/Camila Cely/Documents/GitHub/ProblemSet2_Cely_Ospina")
train_hogares<-readRDS("stores/train_hogares.Rds")
train_personas<-readRDS("stores/train_personas.Rds")
test_hogares<-readRDS("stores/test_hogares.Rds")
test_personas<-readRDS("stores/test_personas.Rds")
##1. Limpieza de datos:
###################
#cuales son las variables que aparecen tanto en train como en test
#hogares
intersect(names(test_hogares), names(train_hogares))
#[1] "id"       "Clase"    "Dominio"  "P5000"    "P5010"    "P5090"    "P5100"    "P5130"    "P5140"    "Nper"
#[11] "Npersug"  "Li"       "Lp"       "Fex_c"    "Depto"    "Fex_dpto"
#Dominio - area metropolitana - cabecera (sirve para efectos fijos por localizacion)*****
#P5000 - de cuantos cuartos en total dispone este hogar
#P5090 - (Si la vivienda ocupada es propia u otro) *********************************
#P5100 - cuota de amortizacion mensual (cuota para reducir deuda) ******************
#P5130 - cuanto tendria que pagar de arriendo si pagara ****************************
#       (esto es para saber cuanto se "ahorran" los que viven en casa propia)
#P5140 - cuanto pagan mensualmente por arriendo ************************************
#Nper - personas en el hogar********************************************************
#Npersug - personas en la unidad de gasto (??)
#Li - linea de indigencia
#Lp - linea de pobreza
#Fex_c - factor de expansion anualizado
#Fex_dpto - factor expansion departamental
#Puse con ********** las que considero mas relevantes
#Dominio #P5090 #P5100 #P5130 #P5140 #Nper
#ahora analisis de esas variables
#por ahora el analisis lo voy a hacer en train porque esa es la base que trabajaremos, entiendo, y en test solo se prueba
#aqui le voy a poner label a las variables
install.packages("expss")
library(expss)
var_lab(train_hogares$P5090) = "Tipo de ocupacion de la vivienda"
val_lab(train_hogares$P5090) = num_lab("
1 Propia
2 Propia pagando
3 Arriendo
4 Usufructo
5 Posesion sin titulo
6 Otra
")
var_lab(train_hogares$P5100) = "Cuota de amortizacion mensual"
var_lab(train_hogares$P5130) = "Valor estimado de arriendo mensual"
var_lab(train_hogares$P5140) =  "Valor de arriendo mensual"
var_lab(train_hogares$Nper) = "Num de personas en el hogar"
var_lab(test_hogares$P5090) = "Tipo de ocupacion de la vivienda"
var_lab(test_hogares$P5100) = "Cuota de amortizacion mensual"
var_lab(test_hogares$P5130) = "Valor estimado de arriendo mensual"
var_lab(test_hogares$P5140) =  "Valor de arriendo mensual"
var_lab(test_hogares$Nper) = "Num de personas en el hogar"
#Summary para ver estad descr
install.packages("gtsummary")
library(gtsummary)
train_h2 <- select(filter(train_hogares),c(Dominio, P5090, P5100, P5130, P5140, Nper)) #aqui estoy haciendo una sub-base con nuestras variables de interes para hacer las estad descr
# summarize the data with our package
table1 <- summary(train_h2)  #lo queria hacer con gtsummary pero no me ha podido instalar bien, sale lo mismo pero mas feo
table1
#Dominio              P5090           P5100               P5130               P5140                Nper
#Length:164960      Min.   :1.000   Min.   :       98   Min.   :       98   Min.   :       20   Min.   : 1.000
#Class :character   1st Qu.:1.000   1st Qu.:   300000   1st Qu.:   200000   1st Qu.:   250000   1st Qu.: 2.000
#Mode  :character   Median :3.000   Median :   500000   Median :   350000   Median :   380000   Median : 3.000
#                   Mean   :2.461   Mean   :   889276   Mean   :   507928   Mean   :   439160   Mean   : 3.295
#                   3rd Qu.:3.000   3rd Qu.:   900000   3rd Qu.:   500000   3rd Qu.:   500000   3rd Qu.: 4.000
#                   Max.   :6.000   Max.   :280000000   Max.   :800000000   Max.   :300000000   Max.   :28.000
#                                   NA's   :159344      NA's   :64344       NA's   :100616
#Primero hay que volver Dominio as factor
train_hogares$Dominio <- as.factor(train_hogares$Dominio)
class(train_hogares$Dominio)
test_hogares$Dominio <- as.factor(test_hogares$Dominio)
class(test_hogares$Dominio) #la puse as factor tambien en test, si no toca borramos estas lineas
#Dominio                   P5090           P5100               P5130               P5140                Nper
#RESTO URBANO:17169   Min.   :1.000   Min.   :       98   Min.   :       98   Min.   :       20   Min.   : 1.000
#RURAL       :15354   1st Qu.:1.000   1st Qu.:   300000   1st Qu.:   200000   1st Qu.:   250000   1st Qu.: 2.000
#BOGOTA      :10567   Median :3.000   Median :   500000   Median :   350000   Median :   380000   Median : 3.000
#MEDELLIN    : 8878   Mean   :2.461   Mean   :   889276   Mean   :   507928   Mean   :   439160   Mean   : 3.295
#BARRANQUILLA: 6668   3rd Qu.:3.000   3rd Qu.:   900000   3rd Qu.:   500000   3rd Qu.:   500000   3rd Qu.: 4.000
#CALI        : 6644   Max.   :6.000   Max.   :280000000   Max.   :800000000   Max.   :300000000   Max.   :28.000
#(Other)     :99680                   NA's   :159344      NA's   :64344       NA's   :100616
#Ahora tenemos que ver que hacer con las que tienen missing values
#amortizacion mensual  #arriendo estimado  #arriendo mensual
sum(train_hogares$P5090 == '1' | train_hogares$P5090 == '2' | train_hogares$P5090 == '4' | train_hogares$P5090 == '5' | train_hogares$P5090 == '6')
#100616 ---- estos son los missings de arriendo mensual (toda la gente que no paga arriendo)
sum(train_hogares$P5090 == '2')
#5616 (propia pagando)  164960 - 5616 = 159344 ---- los missings de amortizacion son los que no estan pagando credito
sum(train_hogares$P5090 == '3')
#64344 (arriendo) ----- estos son exactamente los missings de P5130, no estiman arriendo porque saben el exacto
#Por lo tanto= estos missings no son realmente problematicos porque no son reales missings, solo que cada quien responde lo que le corresponde segun su vivienda
#Bajo esa logica, hay que crear una unica variable que capture esto
#Los de P5090=
#1 = arriendo estimado
#2 = arriendo estimado
#3 = arriendo
#4 = arriendo estimado
#5 = arriendo estimado
#6 = arriendo estimado
train_hogares <- train_hogares %>%
mutate(valor_arriendo = if_else(train_hogares$P5090==3, train_hogares$P5140, train_hogares$P5130))
#aqui lo que hice fue, si la gente realmente paga arriendo, pongame el valor real del arriendo; si no, pongame el arriendo estimado
is.na(train_hogares$valor_arriendo)
sum(is.na(train_hogares$valor_arriendo))
install.packages("expss")
install.packages("gtsummary")
table1
train_hogares$Dominio <- as.factor(train_hogares$Dominio)
class(train_hogares$Dominio)
test_hogares$Dominio <- as.factor(test_hogares$Dominio)
class(test_hogares$Dominio) #la puse as factor tambien en test, si no toca borramos estas lineas
#Dominio                   P5090           P5100               P5130               P5140                Nper
#RESTO URBANO:17169   Min.   :1.000   Min.   :       98   Min.   :       98   Min.   :       20   Min.   : 1.000
#RURAL       :15354   1st Qu.:1.000   1st Qu.:   300000   1st Qu.:   200000   1st Qu.:   250000   1st Qu.: 2.000
#BOGOTA      :10567   Median :3.000   Median :   500000   Median :   350000   Median :   380000   Median : 3.000
#MEDELLIN    : 8878   Mean   :2.461   Mean   :   889276   Mean   :   507928   Mean   :   439160   Mean   : 3.295
#BARRANQUILLA: 6668   3rd Qu.:3.000   3rd Qu.:   900000   3rd Qu.:   500000   3rd Qu.:   500000   3rd Qu.: 4.000
#CALI        : 6644   Max.   :6.000   Max.   :280000000   Max.   :800000000   Max.   :300000000   Max.   :28.000
#(Other)     :99680                   NA's   :159344      NA's   :64344       NA's   :100616
#Ahora tenemos que ver que hacer con las que tienen missing values
#amortizacion mensual  #arriendo estimado  #arriendo mensual
sum(train_hogares$P5090 == '1' | train_hogares$P5090 == '2' | train_hogares$P5090 == '4' | train_hogares$P5090 == '5' | train_hogares$P5090 == '6')
#100616 ---- estos son los missings de arriendo mensual (toda la gente que no paga arriendo)
sum(train_hogares$P5090 == '2')
#5616 (propia pagando)  164960 - 5616 = 159344 ---- los missings de amortizacion son los que no estan pagando credito
sum(train_hogares$P5090 == '3')
train_hogares <- train_hogares %>%
mutate(valor_arriendo = if_else(train_hogares$P5090==3, train_hogares$P5140, train_hogares$P5130))
#aqui lo que hice fue, si la gente realmente paga arriendo, pongame el valor real del arriendo; si no, pongame el arriendo estimado
is.na(train_hogares$valor_arriendo)
sum(is.na(train_hogares$valor_arriendo))
test_hogares <- test_hogares %>%
mutate(valor_arriendo = if_else(test_hogares$P5090==3, test_hogares$P5140, test_hogares$P5130))
#ahora voy a hacer otro subset para ver como quedo esto
train_h3 <- select(filter(train_hogares),c(Dominio, P5090, valor_arriendo, Nper))
table2 <- summary(train_h3)
table2
#duplico base
train_hogares_f<- train_hogares
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.025)
lower_bound
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.01)
lower_bound
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.1)
lower_bound
boxplot(train_hogares_f$valor_arriendo,
ylab = "valor arriendo"
)
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.1)
lower_bound
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.25)
lower_bound
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.01)
lower_bound
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.10)
lower_bound
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.15)
lower_bound
upper_bound <- quantile(train_hogares_f$valor_arriendo, 0.99)
upper_bound
upper_bound <- quantile(train_hogares_f$valor_arriendo, 0.85)
upper_bound
upper_bound <- quantile(train_hogares_f$valor_arriendo, 0.99)
upper_bound
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.15)
lower_bound
lower_bound <- quantile(train_hogares_f$valor_arriendo, 0.25)
lower_bound
upper_bound <- quantile(train_hogares_f$valor_arriendo, 0.99)
upper_bound
lower_bound <- quantile(train_hogares$valor_arriendo, 0.25)
lower_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.99)
upper_bound
train_hogares_f<- train_hogares_f %>% subset(valor_arriendo>= 200000 | valor_arriendo <= 2000000)
IQR(x=geih_Y$logingtot , na.rm=T)
lower_bound <- quantile(train_hogares$valor_arriendo, 0.10)
lower_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.9)
upper_bound
train_hogares_f %>% filter(valor_arriendo >= 200000)
train_hogares_f %>% subset(valor_arriendo >= 200000)
train_hogares_f <- train_hogares_f %>% subset(valor_arriendo >= 200000)
lower_bound <- quantile(train_hogares$valor_arriendo, 0.01)
lower_bound
lower_bound <- quantile(train_hogares$valor_arriendo, 0.05)
lower_bound
lower_bound <- quantile(train_hogares$valor_arriendo, 0.10)
lower_bound
lower_bound <- quantile(train_hogares$valor_arriendo, 0.06)
lower_bound
lower_bound <- quantile(train_hogares$valor_arriendo, 0.07)
lower_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.93)
upper_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.995)
upper_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.996)
upper_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.997)
upper_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.998)
upper_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.999)
upper_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.998)
upper_bound
lower_bound
train_hogares_f<- train_hogares
train_hogares_f <- train_hogares_f %>% subset(valor_arriendo >= lower_bound)
upper_bound <- quantile(train_hogares$valor_arriendo, 0.998)
upper_bound
train_hogares_f <- train_hogares_f %>% subset(valor_arriendo <= upper_bound)
train_h4 <- select(filter(train_hogares_f),c(Dominio, P5090, valor_arriendo, Nper))
table3 <- summary(train_h4)
table3
upper_bound <- quantile(train_hogares$valor_arriendo, 0.93)
upper_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.99)
upper_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.998)
upper_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.997)
upper_bound
boxplot(train_hogares_f$valor_arriendo,
ylab = "valor arriendo"
)
boxplot(train_hogares$valor_arriendo,
ylab = "valor arriendo"
)
upper_bound <- quantile(train_hogares$valor_arriendo, 0.93) #este valor lo escogi revisando el boxplot
upper_bound
train_hogares_f<- train_hogares
train_hogares_f <- train_hogares_f %>% subset(valor_arriendo >= lower_bound) #153547
#quitando los menores a lower_bound nos elimina 11413 observaciones
train_hogares_f <- train_hogares_f %>% subset(valor_arriendo <= upper_bound) #153219
boxplot(train_hogares_f$valor_arriendo,
ylab = "valor arriendo"
)
train_hogares_f<- train_hogares
train_hogares_f <- train_hogares_f %>% subset(valor_arriendo >= lower_bound) #153547
#quitando los menores a lower_bound nos elimina 11413 observaciones
train_hogares_f <- train_hogares_f %>% subset(valor_arriendo <= upper_bound) #153219
train_hogares_f<- train_hogares
train_hogares_f <- train_hogares_f %>% subset(valor_arriendo >= lower_bound) #153547
upper_bound <- quantile(train_hogares$valor_arriendo, 0.998) #este valor lo escogi revisando el boxplot original pero esta sujeto a cambios, ver con sara
upper_bound
train_hogares_f <- train_hogares_f %>% subset(valor_arriendo <= upper_bound)
intersect(names(test_personas), names(train_personas))
summary(train_personas$P6090)
salud <- quantile(train_personas$P6090, 0.998) #este valor lo escogi revisando el boxplot original pero esta sujeto a cambios, ver con sara
salud
summary(train_personas$P6090)
intersect(names(test_personas), names(train_personas)) #aqui salen muchas mas
var_lab(train_personas$P6020) = "Sexo"
var_lab(train_personas$P6040) = "Edad"
var_lab(train_personas$Pet) = "Poblacion en edad de trabajar"
var_lab(train_personas$Oc) = "Ocupado"
var_lab(train_personas$P6210) = "Maximo nivel educativo"
var_lab(test_personas$P6020) = "Sexo"
var_lab(test_personas$P6040) = "Edad"
var_lab(test_personas$Pet) = "Poblacion en edad de trabajar"
var_lab(test_personas$Oc) = "Ocupado"
var_lab(test_personas$P6210) = "Maximo nivel educativo"
intersect(names(test_personas), names(train_personas))
train_p <- select(filter(train_personas),c(Dominio, P6020, P6040, Pet, Oc, P6210)) #aqui estoy haciendo una sub-base con nuestras variables de interes para hacer las estad descr
tablep1 <- summary(train_p) table1
tablep1
tablep1 <- summary(train_p)
tablep1
intersect(names(test_personas), names(train_personas)) #aqui salen muchas mas
train_p <- select(filter(train_personas),c(Dominio, P6020, P6050, P6040, Pet, Oc, P6210)) #aqui estoy haciendo una sub-base con nuestras variables de interes para hacer las estad descr
tablep1 <- summary(train_p)
tablep1
train_personas$Dominio <- as.factor(train_personas$Dominio)
class(train_personas$Dominio)
test_personas$Dominio <- as.factor(test_personas$Dominio)
class(test_personas$Dominio)
train_p <- select(filter(train_personas),c(Dominio, P6020, P6050, P6040, Pet, Oc, P6210)) #aqui estoy haciendo una sub-base con nuestras variables de interes para hacer las estad descr
tablep1 <- summary(train_p)
tablep1
summary(train_personas$P6050)
test_personas <- test_personas %>%
mutate(jefe_hogar = if_else(test_personas$P6050==1, 1, 0))
summary(train_personas$jefe_hogar)
View(test_personas)
train_personas <- train_personas %>%
mutate(jefe_hogar = if_else(train_personas$P6050==1, 1, 0))
summary(train_personas$jefe_hogar)
train_personas <- train_personas %>%
mutate(jefe_hogar_f = if_else(train_personas$P6020==2, 1, 0))
summary(train_personas$jefe_hogar_f)
train_hogares_f<- train_hogares
lower_bound <- quantile(train_hogares$valor_arriendo, 0.07) #los valores inferiores son malos registros, ejemplo, arriendo de 99 pesos
lower_bound
upper_bound <- quantile(train_hogares$valor_arriendo, 0.998) #este valor lo escogi revisando el boxplot original pero esta sujeto a cambios, ver con sara
upper_bound
train_hogares_f <- train_hogares_f %>% subset(valor_arriendo >= lower_bound) #153547
#quitando los menores a lower_bound nos elimina 11413 observaciones
train_hogares_f <- train_hogares_f %>% subset(valor_arriendo <= upper_bound)
train_personas_f<- train_personas
train_personas_f <- train_personas_f %>% subset(jefe_hogar == 1)
train_p2 <- select(filter(train_personas_f),c(Dominio, P6020, P6050, P6040, Pet, Oc, P6210)) #aqui estoy haciendo una sub-base con nuestras variables de interes para hacer las estad descr
tablep2 <- summary(train_p2)
tablep2
intersect(names(test_personas), names(train_personas)) #aqui salen muchas mas
train_p3 <- select(filter(train_personas_f),c(Oc, Des, Ina)) #aqui estoy haciendo una sub-base con nuestras variables de interes para hacer las estad descr
tablep3 <- summary(train_p3)
tablep3
sum(train_personas_f$Oc)
train_personas_f <- train_personas_f %>%
mutate(empleado = if_else(train_personas_f$Oc==1, "Empleado", 0))
train_personas_f <- train_personas_f %>%
mutate(empleado = if_else(train_personas_f$Oc==1, "Empleado", "Desempleado/Inactivo"))
summary(train_personas_f$empleado)
train_personas_f$empleado <- as.factor(train_personas_f$empleado)
class(train_personas_f$empleado)
summary(train_personas_f$empleado)
train_personas_f <- train_personas_f %>%
mutate(empleado = if_else(train_personas_f$Oc==1, "Empleado", "No"))
train_personas_f$empleado <- as.factor(train_personas_f$empleado)
class(train_personas_f$empleado)
summary(train_personas_f$empleado)
train_personas_f <- train_personas_f %>%
mutate(empleado = if_else(train_personas_f$Oc==1, 1, 0))
train_personas_f$empleado <- as.factor(train_personas_f$empleado)
class(train_personas_f$empleado)
summary(train_personas_f$empleado)
train_personas_f <- train_personas_f %>%
mutate(empleado = if_else(train_personas_f$Oc==1, 1, 0))
View(train_personas_f)
train_personas_f<- train_personas
train_personas_f <- train_personas_f %>% subset(jefe_hogar == 1)
train_personas_f <- train_personas_f %>%
mutate(empleado = if_else(train_personas_f$Oc==1, 1, 0))
summary(train_personas_f$empleado)
train_personas_f <- train_personas_f %>%
mutate(empleado = if_else(train_personas_f$Oc==1, 1, 2))
train_personas_f$empleado <- as.factor(train_personas_f$empleado)
class(train_personas_f$empleado)
summary(train_personas_f$empleado)
train_personas_f <- train_personas_f %>% (c("Oc"), ~replace(., is.na(.), 0))
train_personas_f <- train_personas_f %>% (c("Oc") ~replace(., is.na(.), 0))
class(train_personas_f$Oc)
summary(train_personas_f$Oc)
train_personas_f<- train_personas
train_personas_f <- train_personas_f %>% subset(jefe_hogar == 1) #aqui saque base con solo jefes de hogar
train_p2 <- select(filter(train_personas_f),c(Dominio, P6020, P6050, P6040, Pet, Oc, P6210)) #aqui estoy haciendo una sub-base con nuestras variables de interes para hacer las estad descr
tablep2 <- summary(train_p2)
tablep2
#vemos que mejora la situacion de los missings, ya no hay missings en nivel educativo, hay 1 solo missing en Pet
#para Oc continua habiendo missings pero es que Oc no toma valor de cero para nada por default, el valor de desempleados esta en otra variable
#La relacion la vamos a encontrar es analizando Oc - Des - Ina
train_p3 <- select(filter(train_personas_f),c(Oc, Des, Ina)) #aqui estoy haciendo una sub-base con nuestras variables de interes para hacer las estad descr
tablep3 <- summary(train_p3)
tablep3
summary(train_personas_f$Oc)
class(train_personas_f$Oc)
View(train_personas_f)
head(train_personas_f$Oc)
train_personas_f <- train_personas_f %>%
mutate(Oc = coalesce(Oc, 0))
train_personas_f <- train_personas_f %>%
mutate(Oc = coalesce(Oc, 0))
rlang::last_error()
train_personas_f$Oc[is.na(train_personas_f$Oc)] <- 0
head(train_personas_f$Oc)
train_p4 <- select(filter(train_personas_f),c(Dominio, P6020, P6050, P6040, Oc, P6210)) #quite Pet para centrarnos en Oc
tablep4 <- summary(train_p4)
tablep4
train_p4 <- select(filter(train_personas_f),c(Dominio, P6020, P6040, Oc, P6210)) #quite Pet para centrarnos en Oc
tablep4 <- summary(train_p4)
tablep4
train_personas_f <- train_personas_f %>%
mutate(mujer = if_else(train_personas_f$P6020==2, 1, 0))
train_personas_f$P6210 <- as.factor(train_personas_f$P6210)
class(train_personas_f$P6210)
train_p4 <- select(filter(train_personas_f),c(Dominio, P6020, P6040, Oc, P6210)) #quite Pet para centrarnos en Oc
tablep4 <- summary(train_p4)
tablep4
train_p4 <- select(filter(train_personas_f),c(Dominio, P6020, P6040, Oc, P6210, mujer)) #quite Pet para centrarnos en Oc
tablep4 <- summary(train_p4)
tablep4
train_p4 <- select(filter(train_personas_f),c(Dominio, P6040, Oc, P6210, mujer)) #quite Pet para centrarnos en Oc
tablep4 <- summary(train_p4)
tablep4
train_p4 <- select(filter(train_personas_f),c(P6040, Oc, P6210, mujer)) #quite Pet para centrarnos en Oc
tablep4 <- summary(train_p4)
tablep4
boxplot(train_personas_f$P6040,
ylab = "edad"
)
lower_bound_j <- quantile(train_personas_f$P6040, 0.05)
lower_bound_j
lower_bound_j <- quantile(train_personas_f$P6040, 0.01)
lower_bound_j
upper_bound_j <- quantile(train_personas_f$P6040, 0.99)
upper_bound_j
train_personas_f <- train_personas_f %>% subset(P6040 >= lower_bound)
train_personas_f<- train_personas
train_personas_f <- train_personas_f %>% subset(jefe_hogar == 1) #aqui saque base con solo jefes de hogar
train_p2 <- select(filter(train_personas_f),c(Dominio, P6020, P6050, P6040, Pet, Oc, P6210)) #aqui estoy haciendo una sub-base con nuestras variables de interes para hacer las estad descr
tablep2 <- summary(train_p2)
tablep2
#vemos que mejora la situacion de los missings, ya no hay missings en nivel educativo, hay 1 solo missing en Pet
#para Oc continua habiendo missings pero es que Oc no toma valor de cero para nada por default, el valor de desempleados esta en otra variable
#La relacion la vamos a encontrar es analizando Oc - Des - Ina
train_p3 <- select(filter(train_personas_f),c(Oc, Des, Ina)) #aqui estoy haciendo una sub-base con nuestras variables de interes para hacer las estad descr
tablep3 <- summary(train_p3)
tablep3
#Oc = 117234 individuos (71% de los jefes de hogar)
#Des = 7645 individuos (4,63% de los jefes de hogar) #intuicion= estos nos ayudan a predecir pobres
#Ina = 40080 individuos (24,29% de los jefes de hogar) #que querra decir que el jefe de hogar esta inactivo... pobre o no pobre?
#total = 164959
#por lo tanto vemos que en realidad hay UN missing value (total individuos 164960) #no es representativo
#como no podemos usar las tres variables porque habria multicolinearidad, voy a ponerle valor de 0 a todos los missings de Oc
#porque a partir del analisis anterior sabemos que realmente esos missings corresponden a gente que no esta trabajando
#y no son verdaderos missings
summary(train_personas_f$Oc)
class(train_personas_f$Oc)
head(train_personas_f$Oc)
train_personas_f$Oc[is.na(train_personas_f$Oc)] <- 0 #aqui lo que hice fue cambiar los NA de Oc por valor de cero
head(train_personas_f$Oc)  #comprobar que quedo bien
#voy a crearle variable de mujer
train_personas_f <- train_personas_f %>%
mutate(mujer = if_else(train_personas_f$P6020==2, 1, 0))
#educacion es factor
train_personas_f$P6210 <- as.factor(train_personas_f$P6210)
class(train_personas_f$P6210)
#ahora veamos como queda
train_p4 <- select(filter(train_personas_f),c(P6040, Oc, P6210, mujer)) #quite Pet para centrarnos en Oc
tablep4 <- summary(train_p4)
tablep4
#    P6040             Oc                           P6210                  mujer
#Min.   : 11.0   Min.   :0.0000   Ninguno                    : 8603   Min.   :0.0000
#1st Qu.: 37.0   1st Qu.:0.0000   Preescolar                 :   13   1st Qu.:0.0000
#Median : 49.0   Median :1.0000   Básica primaria (1o - 5o)  :46619   Median :0.0000
#Mean   : 49.6   Mean   :0.7107   Básica secundaria (6o - 9o):21616   Mean   :0.4164
#3rd Qu.: 61.0   3rd Qu.:1.0000   Media (10o - 13o)          :43028   3rd Qu.:1.0000
#Max.   :108.0   Max.   :1.0000   Superior o universitaria   :45061   Max.   :1.0000
#No sabe, no informa        :   20
#VEMOS= el promedio de edad de jefes de hogar es 49 años, 71% estan empleados, 41% son mujeres
#otra cosa= vemos que hay outliers en edad, aun mas teniendo en cuenta que en esta base tenemos solo jefe de hogar
boxplot(train_personas_f$P6040,
ylab = "edad"
)
lower_bound_j <- quantile(train_personas_f$P6040, 0.01)
lower_bound_j #20
upper_bound_j <- quantile(train_personas_f$P6040, 0.99)
upper_bound_j #87 #de esta manera sacamos esos valores locos de mas de 100 años
train_personas_f <- train_personas_f %>% subset(P6040 >= lower_bound_j)
train_personas_f <- train_personas_f %>% subset(P6040 <= upper_bound_j)
